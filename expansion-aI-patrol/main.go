package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"os"
)

// üîß –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const (
	inputPath  = "C:\\Games\\DayZServer\\mpmissions\\dayzOffline.enoch\\expansion\\settings\\AIPatrolSettings.json"
	backupPath = "C:\\Games\\DayZServer\\mpmissions\\dayzOffline.enoch\\expansion\\settings\\AIPatrolSettings_backup.json"
)

// üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ä—É–ª–µ–π
const (
	minAI        = 10    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –≤ –ø–∞—Ç—Ä—É–ª–µ
	maxAI        = 15    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –≤ –ø–∞—Ç—Ä—É–ª–µ
	respawnTime  = 600.0 // –í—Ä–µ–º—è —Ä–µ—Å–ø–∞–≤–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 –º–∏–Ω—É—Ç)
	minWaypoints = 3     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Waypoints –Ω–∞ –Ω–æ–≤—ã–π –ø–∞—Ç—Ä—É–ª—å
	maxWaypoints = 7     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Waypoints –Ω–∞ –Ω–æ–≤—ã–π –ø–∞—Ç—Ä—É–ª—å
	mapMinCoord  = 250   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X/Z –Ω–∞ –∫–∞—Ä—Ç–µ
	mapMaxCoord  = 15000 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X/Z –Ω–∞ –∫–∞—Ä—Ç–µ
	// mapMaxCoord = 15000 // –î–ª—è ChernarusPlus
	// mapMaxCoord = 12800 // –î–ª—è Livonia (Enoch)
	// mapMaxCoord = 12800 // –î–ª—è Namalsk
	// mapMaxCoord = 20480 // –î–ª—è Deer Isle
	// mapMaxCoord = 10240 // –î–ª—è Esseker
	// mapMaxCoord = 20480 // –î–ª—è Takistan
	// mapMaxCoord = 12800 // –î–ª—è Banov
	// mapMaxCoord = 10240 // –î–ª—è Pripyat
	// mapMaxCoord = 10240 // –î–ª—è Valning
	// mapMaxCoord = 12288 // –î–ª—è Iztek
	patrolMultiplier = 2 // –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä—É–ª–µ–π –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ. –í—Å–µ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å backup —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
)

// generateWaypoint —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É Waypoint –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
func generateWaypoint(existing map[string]struct{}) []float64 {
	var x, z float64
	for {
		x = float64(rand.Intn(mapMaxCoord-mapMinCoord) + mapMinCoord)
		z = float64(rand.Intn(mapMaxCoord-mapMinCoord) + mapMinCoord)
		key := fmt.Sprintf("%.0f_%.0f", x, z)
		if _, exists := existing[key]; !exists {
			existing[key] = struct{}{}
			break
		}
	}
	return []float64{x, 0.0, z}
}

type Settings struct {
	MVersion                        int      `json:"m_Version"`
	Enabled                         int      `json:"Enabled"`
	DespawnTime                     float64  `json:"DespawnTime"`
	RespawnTime                     float64  `json:"RespawnTime"`
	MinDistRadius                   float64  `json:"MinDistRadius"`
	MaxDistRadius                   float64  `json:"MaxDistRadius"`
	DespawnRadius                   float64  `json:"DespawnRadius"`
	AccuracyMin                     float64  `json:"AccuracyMin"`
	AccuracyMax                     float64  `json:"AccuracyMax"`
	ThreatDistanceLimit             float64  `json:"ThreatDistanceLimit"`
	NoiseInvestigationDistanceLimit float64  `json:"NoiseInvestigationDistanceLimit"`
	DamageMultiplier                float64  `json:"DamageMultiplier"`
	DamageReceivedMultiplier        float64  `json:"DamageReceivedMultiplier"`
	ObjectPatrols                   []any    `json:"ObjectPatrols"`
	Patrols                         []Patrol `json:"Patrols"`
}

type Patrol struct {
	Name                            string      `json:"Name"`
	Persist                         int         `json:"Persist"`
	Faction                         string      `json:"Faction"`
	Formation                       string      `json:"Formation"`
	FormationLooseness              float64     `json:"FormationLooseness"`
	LoadoutFile                     string      `json:"LoadoutFile"`
	Units                           []any       `json:"Units"`
	NumberOfAI                      int         `json:"NumberOfAI"`
	Behaviour                       string      `json:"Behaviour"`
	Speed                           string      `json:"Speed"`
	UnderThreatSpeed                string      `json:"UnderThreatSpeed"`
	CanBeLooted                     int         `json:"CanBeLooted"`
	UnlimitedReload                 int         `json:"UnlimitedReload"`
	SniperProneDistanceThreshold    float64     `json:"SniperProneDistanceThreshold"`
	AccuracyMin                     float64     `json:"AccuracyMin"`
	AccuracyMax                     float64     `json:"AccuracyMax"`
	ThreatDistanceLimit             float64     `json:"ThreatDistanceLimit"`
	NoiseInvestigationDistanceLimit float64     `json:"NoiseInvestigationDistanceLimit"`
	DamageMultiplier                float64     `json:"DamageMultiplier"`
	DamageReceivedMultiplier        float64     `json:"DamageReceivedMultiplier"`
	CanBeTriggeredByAI              int         `json:"CanBeTriggeredByAI"`
	MinDistRadius                   float64     `json:"MinDistRadius"`
	MaxDistRadius                   float64     `json:"MaxDistRadius"`
	DespawnRadius                   float64     `json:"DespawnRadius"`
	MinSpreadRadius                 float64     `json:"MinSpreadRadius"`
	MaxSpreadRadius                 float64     `json:"MaxSpreadRadius"`
	Chance                          float64     `json:"Chance"`
	WaypointInterpolation           string      `json:"WaypointInterpolation"`
	DespawnTime                     float64     `json:"DespawnTime"`
	RespawnTime                     float64     `json:"RespawnTime"`
	UseRandomWaypointAsStartPoint   int         `json:"UseRandomWaypointAsStartPoint"`
	Waypoints                       [][]float64 `json:"Waypoints"`
}

func main() {
	data, err := os.ReadFile(inputPath)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON: " + err.Error())
	}

	if err := os.WriteFile(backupPath, data, 0644); err != nil {
		panic("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±—ç–∫–∞–ø–∞: " + err.Error())
	}

	var settings Settings
	if err := json.Unmarshal(data, &settings); err != nil {
		panic("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + err.Error())
	}

	// –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Waypoint‚Äô–æ–≤
	usedCoords := make(map[string]struct{})
	for _, p := range settings.Patrols {
		for _, wp := range p.Waypoints {
			key := fmt.Sprintf("%.0f_%.0f", wp[0], wp[2])
			usedCoords[key] = struct{}{}
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ä—É–ª–µ–π
	var newPatrols []Patrol
	for _, p := range settings.Patrols {
		p.NumberOfAI = rand.Intn(maxAI-minAI+1) + minAI
		p.RespawnTime = respawnTime
		newPatrols = append(newPatrols, p)
	}

	originalCount := len(settings.Patrols)
	countToAdd := originalCount * patrolMultiplier
	fmt.Printf("üì¶ –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ç—Ä—É–ª–µ–π: %d. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d.\n", originalCount, countToAdd)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ä—É–ª–µ–π
	for i := 0; i < countToAdd; i++ {
		template := settings.Patrols[i%originalCount]
		newP := template
		newP.NumberOfAI = rand.Intn(maxAI-minAI+1) + minAI
		newP.RespawnTime = respawnTime
		wpCount := rand.Intn(maxWaypoints-minWaypoints+1) + minWaypoints
		newP.Waypoints = nil
		for j := 0; j < wpCount; j++ {
			newP.Waypoints = append(newP.Waypoints, generateWaypoint(usedCoords))
		}
		newPatrols = append(newPatrols, newP)
		fmt.Printf("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ç—Ä—É–ª—å #%d: %d —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞\n", i+1, wpCount)
	}

	settings.Patrols = newPatrols

	output, err := json.MarshalIndent(settings, "", "  ")
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: " + err.Error())
	}
	if err := os.WriteFile(inputPath, output, 0644); err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ JSON: " + err.Error())
	}

	fmt.Printf("üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ –ø–∞—Ç—Ä—É–ª–µ–π: %d. –ë—ç–∫–∞–ø: %s\n", len(settings.Patrols), backupPath)
}
