package main

import (
	"encoding/xml"
	"fmt"
	"math"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

const (
	// üîß –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
	path = "C:\\Games\\DayZServer\\mpmissions\\dayzOffline.chernarusplus\\db\\types.xml"

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª—É—Ç–∞ (–Ω–∞ –Ω–µ–≥–æ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å backup —Ñ–∞–π–ª —Å –≤–∞–Ω–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –ª–∏–±–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
	scaleFactor = 0.5
)

type Types struct {
	XMLName xml.Name `xml:"types"`
	Types   []Type   `xml:"type"`
}

type Type struct {
	XMLName  xml.Name `xml:"type"`
	Name     string   `xml:"name,attr"`
	InnerXML string   `xml:",innerxml"`
}

func scaleNominal(innerXML string) string {
	lines := strings.Split(innerXML, "\n")
	for i, line := range lines {
		lineTrimmed := strings.TrimSpace(line)
		if strings.HasPrefix(lineTrimmed, "<nominal>") && strings.HasSuffix(lineTrimmed, "</nominal>") {
			valStr := strings.TrimPrefix(lineTrimmed, "<nominal>")
			valStr = strings.TrimSuffix(valStr, "</nominal>")
			valStr = strings.TrimSpace(valStr)

			if val, err := strconv.Atoi(valStr); err == nil {
				newVal := int(math.Ceil(float64(val) * scaleFactor))
				if newVal < 1 {
					newVal = 1
				}
				lines[i] = fmt.Sprintf("  <nominal>%d</nominal>", newVal)
			}
		}
	}
	return strings.Join(lines, "\n")
}

func main() {
	data, err := os.ReadFile(path)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	var types Types
	if err := xml.Unmarshal(data, &types); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: %v\n", err)
		return
	}

	for i := range types.Types {
		types.Types[i].InnerXML = scaleNominal(types.Types[i].InnerXML)
	}

	output, err := xml.MarshalIndent(types, "", "  ")
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ XML: %v\n", err)
		return
	}
	output = append([]byte(xml.Header), output...)

	backupPath := filepath.Join(filepath.Dir(path), "types_backup.xml")
	if err := os.WriteFile(backupPath, data, 0644); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: %v\n", err)
		return
	}

	if err := os.WriteFile(path, output, 0644); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	fmt.Println("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫:", backupPath)
}
