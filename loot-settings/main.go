package main

import (
	"encoding/xml"
	"fmt"
	"math"
	"os"
	"path/filepath"
	"strings"

	"github.com/zonder12120/dayz-server-scripts/pkg"
)

type Config struct {
	Path        string  `yaml:"path"`
	ScaleFactor float64 `yaml:"scale_factor"`
}

type Types struct {
	XMLName xml.Name `xml:"types"`
	Types   []Type   `xml:"type"`
}

type Type struct {
	XMLName    xml.Name `xml:"type"`
	Name       string   `xml:"name,attr"`
	NominalTag *Nominal `xml:"nominal"`
	Rest       string   `xml:",innerxml"`
}

type Nominal struct {
	Value int `xml:",chardata"`
}

// scaleNominalValue –≤—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ nominal, –º–∞—Å—à—Ç–∞–±–∏—Ä—É—è –µ–≥–æ
func scaleNominalValue(value int, scaleFactor float64) int {
	newValue := int(math.Ceil(float64(value) * scaleFactor))
	if newValue < 1 {
		return 1
	}
	return newValue
}

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var cfg Config
	err := pkg.LoadConfig("config.yml", &cfg)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", err)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
	inputPath := filepath.Join(filepath.Dir(cfg.Path), "types.xml")
	backupBase := filepath.Join(filepath.Dir(cfg.Path), "backups", "types_backup.xml")

	// –ß—Ç–µ–Ω–∏–µ XML-—Ñ–∞–π–ª–∞
	data, err := os.ReadFile(inputPath)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ XML-—Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
	backupPath := pkg.GetBackupPathWithIndex(backupBase)
	if err = os.MkdirAll(filepath.Dir(backupPath), 0755); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞: %v\n", err)
		return
	}
	if err = os.WriteFile(backupPath, data, 0644); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: %v\n", err)
		return
	}
	fmt.Println("üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫:", backupPath)

	var types Types
	decoder := xml.NewDecoder(strings.NewReader(string(data)))
	decoder.Entity = xml.HTMLEntity
	decoder.Strict = false
	if err = decoder.Decode(&types); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: %v\n", err)
		return
	}

	// –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	for i := range types.Types {
		if types.Types[i].NominalTag != nil {
			types.Types[i].NominalTag.Value = scaleNominalValue(types.Types[i].NominalTag.Value, cfg.ScaleFactor)
		}
	}

	output, err := xml.MarshalIndent(types, "", "  ")
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ XML: %v\n", err)
		return
	}

	output = append([]byte(xml.Header), output...)

	if err = os.WriteFile(inputPath, output, 0644); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	fmt.Println("üéâ –ì–æ—Ç–æ–≤–æ! –ó–Ω–∞—á–µ–Ω–∏—è nominal —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
}
